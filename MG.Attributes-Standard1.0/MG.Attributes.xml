<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MG.Attributes</name>
    </assembly>
    <members>
        <member name="T:MG.Attributes.AdditionalValueAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> base class implementation designed for storing an additional 
            <see cref="T:System.Object"/> value for a member (field, property, or <see cref="T:System.Enum"/>).
            </summary>
            <remarks>
                This value held by this <see cref="T:System.Attribute"/> can be retrieved
                by <see cref="T:MG.Attributes.AttributeValuator"/> or another class implementing <see cref="T:MG.Attributes.IAttributeValueResolver"/>.
            </remarks>
        </member>
        <member name="P:MG.Attributes.AdditionalValueAttribute.Count">
            <summary>
            The number of individual values held by the <see cref="T:MG.Attributes.AdditionalValueAttribute"/>.
            </summary>
            <returns>
                The number of values held by the attribute.  If the value does not implement <see cref="T:System.Collections.ICollection"/> nor 
                <see cref="T:System.Collections.IEnumerable"/>, 1 is returned instead.
            </returns>
        </member>
        <member name="P:MG.Attributes.AdditionalValueAttribute.ValueType">
            <summary>
            The resolved type of the held object by the <see cref="T:MG.Attributes.AdditionalValueAttribute"/>.
            </summary>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.#ctor(System.Object)">
            <summary>
            The lone constructor for <see cref="T:MG.Attributes.AdditionalValueAttribute"/>.  It requires a single <see cref="T:System.Object"/>
            as a parameter which becomes the underlying value that can be retrieved later.
            </summary>
            <param name="value">The value to hold as an additional object.</param>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.GetAs``1">
            <summary>
            Returns the held value of the <see cref="T:MG.Attributes.AdditionalValueAttribute"/> and casts it to the 
            specified type <typeparamref name="T"/>.
            </summary>
            <remarks>
                Dynamics are not supported.
            </remarks>
            <typeparam name="T">
                The <see cref="T:System.Type"/> to cast the result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/>.
            </typeparam>
            <exception cref="T:System.InvalidCastException">
                Thrown when the object value
                can't be explicitly cast as the given type.  
            </exception>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.GetValueCollection">
            <summary>
            Attempts to cast the result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/>
            as an implementation of <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
                If the value provided to the <see cref="T:MG.Attributes.AdditionalValueAttribute"/> implements <see cref="T:System.Collections.ICollection"/>,
                then a collection is returned.  If the value provided only implements <see cref="T:System.Collections.IEnumerable"/>, then an 
                attempt will be to enumerate the value and return a constructed collection.
                If the conditions described are <see langword="false"/>, then <see langword="null"/> is returned.
            </returns>
            <exception cref="T:System.InvalidCastException">
                The result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/> could not be cast to 
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the type <see cref="T:System.Object"/>.
            </exception>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.GetValues``1">
            <summary>
            Retrieves the held value as an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/>.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.TryGetAs``1(System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to retrieve and cast the result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/> as the specified type <typeparamref name="T"/>.
            </summary>
            <remarks>
                Any <see cref="T:System.Exception"/> that occurs will be discarded.
            </remarks>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/>.</typeparam>
            <param name="tIsValidFunc">
                The function used to validate that the cast of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/> results in 
                the desired output.
            </param>
            <param name="valueAsT">
                The casted value output from <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/>.  Even if the <paramref name="tIsValidFunc"/> function
                returns <see langword="false"/>, this value can still be populated.
            </param>
            <returns>
                Returns the <see cref="T:System.Boolean"/> result value of the <paramref name="tIsValidFunc"/> function.
                -or-
                Returns <see langword="false"/> if an <see cref="T:System.Exception"/> occurs.
            </returns>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.TryGetAs``1(System.Func{``0,System.Boolean},``0@,System.Exception@)">
            <summary>
            Attempts to retrieve and cast the result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/> as the specified type <typeparamref name="T"/>.
            </summary>
            <remarks>
                Any <see cref="T:System.Exception"/> that is thrown is captured in <paramref name="caughtException"/>.
            </remarks>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the result of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/>.</typeparam>
            <param name="tIsValidFunc">
                The function used to validate that the cast of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/> results in 
                the desired output.
            </param>
            <param name="valueAsT">
                The casted value output from <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValue"/>.  Even if the <paramref name="tIsValidFunc"/> function
                returns <see langword="false"/>, this value can still be populated.
            </param>
            <param name="caughtException">
                An out variable holding any captured <see cref="T:System.Exception"/> that may have resulted during the call.
            </param>
            <returns>
                Returns the <see cref="T:System.Boolean"/> result value of the <paramref name="tIsValidFunc"/> function.
                -or-
                Returns <see langword="false"/> if an <see cref="T:System.Exception"/> occurs.
            </returns>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.TryGetAsCollection(System.Collections.ICollection@)">
            <summary>
            Attempts to retrieve the resut of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValueCollection"/> as an implementation of <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
                Any <see cref="T:System.Exception"/> that is thrown is discarded.
            </remarks>
            <param name="collection">The out variable of the value as an implementation of <see cref="T:System.Collections.ICollection"/>.</param>
            <returns>
                <see langword="true"/> if <paramref name="collection"/> is not <see langword="null"/>;
                otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.TryGetAsCollection(System.Collections.ICollection@,System.Exception@)">
            <summary>
            Attempts to retrieve the resut of <see cref="M:MG.Attributes.AdditionalValueAttribute.GetValueCollection"/> as an implementation of <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
                Any <see cref="T:System.Exception"/> that is thrown is captured in <paramref name="caughtException"/>.
            </remarks>
            <param name="collection">The out variable of the value as an implementation of <see cref="T:System.Collections.ICollection"/>.</param>
            <param name="caughtException">
                An out variable holding any captured <see cref="T:System.Exception"/> that may have resulted during the call.
            </param>
            <returns>
                <see langword="false"/> if <paramref name="collection"/> is <see langword="null"/> or 
                an <see cref="T:System.Exception"/> was caught in <paramref name="caughtException"/>; otherwise, 
                <see langword="true"/>.
            </returns>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the held values like a collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.GetValue">
            <summary>
            The main method of retrieving the held value from the <see cref="T:MG.Attributes.AdditionalValueAttribute"/>.
            </summary>
            <remarks>
                The interface explicit implementation of <see cref="P:MG.Attributes.IValueAttribute.Value"/> retrieves the
                value using this method.
            </remarks>
            <returns>
                The held value of the <see cref="T:MG.Attributes.AdditionalValueAttribute"/> as an <see cref="T:System.Object"/>.
                By default, it returns the value of <see cref="P:MG.Attributes.AdditionalValueAttribute.BackingValue"/>.
            </returns>
        </member>
        <member name="M:MG.Attributes.AdditionalValueAttribute.GetValueType(System.Object)">
            <summary>
            The method called in the default constructor used to resolve the <see cref="T:System.Type"/> of the 
            incoming <see cref="T:System.Object"/>.
            </summary>
            <remarks>
                Can be overriden for custom <see cref="T:System.Type"/> resolution.
            </remarks>
            <param name="value">The <see cref="T:MG.Attributes.AdditionalValueAttribute"/>'s held <see cref="T:System.Object"/>.</param>
            <returns>
                By default, <paramref name="value"/>'s <see cref="T:System.Type"/> resolved by <see cref="M:System.Object.GetType"/>
            </returns>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetAttributeValue``2(System.Enum)">
            <summary>
            Gets the first value from the attributed <see cref="T:MG.Attributes.IValueAttribute"/> of the <see cref="T:System.Enum"/>, then casts 
            and returns it as the type <typeparamref name="TOutput"/>.
            </summary>
            <typeparam name="TOutput">The type of the underlying value.</typeparam>
            <typeparam name="TAttribute">The type of the <see cref="T:MG.Attributes.IValueAttribute"/>.</typeparam>
            <param name="enumValue">The <see cref="T:System.Enum"/> whose value is retrieved.</param>
            <exception cref="T:System.InvalidCastException">The secondary value cannot be converted to the specified type.</exception>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetAttributeValue``1(System.Enum)">
            <summary>
            Gets the first value from the attributed <see cref="T:MG.Attributes.IValueAttribute"/> of the <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="TAttribute">The type of the <see cref="T:MG.Attributes.IValueAttribute"/>.</typeparam>
            <param name="enumValue">The <see cref="T:System.Enum"/> whose value is retrieved.</param>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetAttributeValues``2(System.Enum)">
            <summary>
            Retrieves the secondary values from one or multiple <see cref="T:MG.Attributes.IValueAttribute"/> attributes attached
            to a single <see cref="T:System.Enum"/> value type.
            </summary>
            <typeparam name="TOutput">The type of the retrieved value.</typeparam>
            <typeparam name="TAttribute">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="enumValue">The specific enumeration value that has the attached <see cref="T:MG.Attributes.IValueAttribute"/> attributes.</param>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetEnumFromValue``2(System.Object)">
            <summary>
            Gets the first, lowest enumeration that has an <see cref="P:MG.Attributes.IValueAttribute.Value"/> matching 
            the given <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="TEnum">
                The type of <see cref="T:System.Enum"/> whose attributes that are of the type <typeparamref name="TAttribute"/>
                and whose <see cref="P:MG.Attributes.IValueAttribute.Value"/> is tested for equality against <paramref name="objValue"/>.
            </typeparam>
            <typeparam name="TAttribute">
                The type of <see cref="T:System.Attribute"/> which implements <see cref="T:MG.Attributes.IValueAttribute"/> that is searched
                for on the specified <typeparamref name="TEnum"/>.
            </typeparam>
            <param name="objValue">The object that <see cref="P:MG.Attributes.IValueAttribute.Value"/> should equal.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objValue"/> is null.</exception>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
            <returns>
                An <see cref="T:System.Enum"/> value of type <typeparamref name="TEnum"/> that has an <see cref="T:MG.Attributes.IValueAttribute"/>
                implementing <see cref="T:System.Attribute"/> whose held value matches the specified <paramref name="objValue"/>.
            </returns>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetEnumsFromValues``3(System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get the enum values that have attached an <see cref="T:MG.Attributes.IValueAttribute"/> attribute which contains any overlapping 
            items of the specified collection.
            </summary>
            <typeparam name="TInput">The type of the collection's items.</typeparam>
            <typeparam name="TEnum">The type of <see cref="T:System.Enum"/> that will be returned.</typeparam>
            <typeparam name="TAttribute">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="objValues">The collection of items the <see cref="P:MG.Attributes.IValueAttribute.Value"/> should equal.</param>
            <exception cref="T:System.NotSupportedException">Element is not a constructor, method, property, event, type, or field.</exception>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetEnumFromValues``3(System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get the enum value that has an <see cref="T:MG.Attributes.IValueAttribute"/> attribute with the matching collection
            of values.  If more than one <see cref="T:System.Enum"/> matches the collection, the first, lowest value <see cref="T:System.Enum"/>
            is returned.
            </summary>
            <typeparam name="TInput">The type of the collection's items.</typeparam>
            <typeparam name="TOutput">The type of <see cref="T:System.Enum"/> that will be returned.</typeparam>
            <typeparam name="TAttribute">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="objValues">The collection of items the <see cref="P:MG.Attributes.IValueAttribute.Value"/> should equal.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objValues"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="objValues"/> contains no elements.</exception>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetAttributesFromEnum``1(System.Enum)">
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
            <returns>
                A collection of the attributes that are applied to <paramref name="e"/> and that match
                <typeparamref name="TAttribute"/>, or an empty collection.
            </returns>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetAttributesFromAllEnums``2">
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
        <member name="M:MG.Attributes.AttributeValuator.GetFieldInfo(System.Enum)">
            <summary>
            Retrieves the <see cref="T:System.Reflection.FieldInfo"/> for the specified enumeration value.
            </summary>
            <param name="e">
                The enumeration value that is used, after being converted to <see cref="T:System.String"/>,
                to return the <see cref="T:System.Reflection.FieldInfo"/> by name of the <see cref="T:System.Enum"/> type.
            </param>
            <returns>
                A <see cref="T:System.Reflection.FieldInfo"/> object that represents the specified field of the enumeration value, or
                <see langword="null"/> if the field is not found.
            </returns>
        </member>
        <member name="T:MG.Attributes.IValueAttribute">
            <summary>
            An interface exposing a value property and
            method for getting an underlying value with a cast.  Used on <see cref="T:System.Attribute"/> implementations.
            </summary>
        </member>
        <member name="P:MG.Attributes.IValueAttribute.Value">
            <summary>
            The specified value given during the <see cref="T:MG.Attributes.IValueAttribute"/> implementing class's construction.
            </summary>
        </member>
        <member name="M:MG.Attributes.IValueAttribute.GetAs``1">
            <summary>
            Returns the held value of the <see cref="T:MG.Attributes.IValueAttribute"/> and casts it to the 
            specified type <typeparamref name="T"/>.
            </summary>
            <remarks>
                Dynamics are not supported.
            </remarks>
            <typeparam name="T">
                The type to cast <see cref="P:MG.Attributes.IValueAttribute.Value"/>'s 
                property as.
            </typeparam>
            <exception cref="T:System.InvalidCastException">Thrown when the object value
            can't be explicitly cast as the given type.  
            </exception>
        </member>
        <member name="M:MG.Attributes.IValueAttribute.ValueIsString">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value specifying if <see cref="P:MG.Attributes.IValueAttribute.Value"/>
            is a <see cref="T:System.String"/>.
            </summary>
            <returns>'True' is the value is a <see cref="T:System.String"/>; otherwise 'False'.</returns>
        </member>
        <member name="T:MG.Attributes.IValueEnumGetter">
            <summary>
            An interface exposing methods for retrieving secondary object values from 
            <see cref="T:System.Enum"/> value types.
            </summary>
        </member>
        <member name="M:MG.Attributes.IValueEnumGetter.GetAttributeValue``2(System.Enum)">
            <summary>
            Retrieves a secondary value from an <see cref="T:MG.Attributes.IValueAttribute"/> attribute attached to 
            an <see cref="T:System.Enum"/> value type.
            </summary>
            <typeparam name="TOutput">The type of the retrieved value.</typeparam>
            <typeparam name="TAtt">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="enumValue">The specific enumeration value that has the attached <see cref="T:MG.Attributes.IValueAttribute"/> attribute.</param>
        </member>
        <member name="M:MG.Attributes.IValueEnumGetter.GetAttributeValues``2(System.Enum)">
            <summary>
            Retrieves the secondary values from one or multiple <see cref="T:MG.Attributes.IValueAttribute"/> attributes attached
            to a single <see cref="T:System.Enum"/> value type.
            </summary>
            <typeparam name="TOutput">The type of the retrieved value.</typeparam>
            <typeparam name="TAtt">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="enumValue">The specific enumeration value that has the attached <see cref="T:MG.Attributes.IValueAttribute"/> attributes.</param>
        </member>
        <member name="M:MG.Attributes.IValueEnumGetter.TryGetAttributeValue``2(System.Enum,``1@,System.Exception@)">
            <summary>
            Attempts to retrieve the secondary value from an <see cref="T:MG.Attributes.IValueAttribute"/> attribute attached to a
            single <see cref="T:System.Enum"/> value type returning the success or failure of that operation.
            </summary>
            <typeparam name="TOutput">The type of the retrieved value.</typeparam>
            <typeparam name="TAtt">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="enumValue">The specific enumeration value that has the attached <see cref="T:MG.Attributes.IValueAttribute"/> attributes.</param>
            <param name="outValue">The casted value retrieved from the attribute.</param>
        </member>
        <member name="M:MG.Attributes.IValueEnumGetter.GetEnumFromValue``2(System.Object)">
            <typeparam name="TOutput">The type of <see cref="T:System.Enum"/> that will be returned.</typeparam>
            <typeparam name="TAtt">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="objValue">The object that <see cref="P:MG.Attributes.IValueAttribute.Value"/> should equal.</param>
        </member>
        <member name="M:MG.Attributes.IValueEnumGetter.GetEnumsFromValues``3(System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get the enum values that have attached an <see cref="T:MG.Attributes.IValueAttribute"/> attribute which contains any overlapping 
            items of the specified collection.
            </summary>
            <typeparam name="TInput">The type of the collection's items.</typeparam>
            <typeparam name="TOutput">The type of <see cref="T:System.Enum"/> that will be returned.</typeparam>
            <typeparam name="TAtt">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="objValues">The collection of items the <see cref="P:MG.Attributes.IValueAttribute.Value"/> should equal.</param>
        </member>
        <member name="M:MG.Attributes.IValueEnumGetter.GetEnumFromValues``3(System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get the enum value that has an <see cref="T:MG.Attributes.IValueAttribute"/> attribute with the matching collection.
            of values.
            </summary>
            <typeparam name="TInput">The type of the collection's items.</typeparam>
            <typeparam name="TOutput">The type of <see cref="T:System.Enum"/> that will be returned.</typeparam>
            <typeparam name="TAtt">The type of <see cref="T:MG.Attributes.IValueAttribute"/> that is attached.</typeparam>
            <param name="objValues">The collection of items the <see cref="P:MG.Attributes.IValueAttribute.Value"/> should equal.</param>
        </member>
        <member name="M:MG.Attributes.IValueRecaller.GetAttributeValue``2(System.Enum)">
            <summary>
            Gets the first value from the attributed <see cref="T:MG.Attributes.IValueAttribute"/> of the enumeration value and casts 
            it to the type <typeparamref name="TOutput"/>.
            </summary>
            <typeparam name="TOutput">The type of the underlying value.</typeparam>
            <typeparam name="TAttribute">The type of the <see cref="T:MG.Attributes.IValueAttribute"/>.</typeparam>
            <param name="enumValue">The <see cref="T:System.Enum"/> whose value is retrieved.</param>
            <exception cref="T:System.InvalidCastException">The secondary value cannot be converted to the specified type.</exception>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
        <member name="M:MG.Attributes.IValueRecaller.GetAttributeValue``1(System.Enum)">
            <summary>
            Gets the first value from the attributed <see cref="T:MG.Attributes.IValueAttribute"/> of the <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="TAttribute">The type of the <see cref="T:MG.Attributes.IValueAttribute"/>.</typeparam>
            <param name="enumValue">The <see cref="T:System.Enum"/> whose value is retrieved.</param>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        </member>
    </members>
</doc>
